{"version":3,"sources":["constants/AppConstants.js","dispatcher/AppDispatcher.js","stores/Store.js","actions/Actions.js","components/news/NewsItem.js","components/news/TopContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["ActionTypes","FETCH_NEWS","RECIEVE_NEWS","CHANGE_PAGE","dispatcher_AppDispatcher","action","arguments","length","undefined","Object","get","getPrototypeOf","AppDispatcher","prototype","this","call","Dispatcher","stores_Store","news","isLoading","activePage","totalItemsCount","state","type","RECEIVE_NEWS","response","slice","allArticles","ReduceStore","Actions","loadNews","receiveOnly","dispatch","axios","then","data","results","catch","error","window","console","log","NewsItem","open","handleToggle","_this","setState","article","props","publishedDate","Date","published_date","react_default","a","createElement","className","src","multimedia","url","onClick","style","cursor","title","href","short_url","target","rel","abstract","byline","toLocaleString","React","Component","TopContainer","handlePageChange","pageNumber","Boolean","map","item","news_NewsItem","key","renderItems","Pagination_default","firstPageText","lastPageText","prevPageText","nextPageText","itemsCountPerPage","onChange","pageRangeDisplayed","Math","ceil","Store","objectSpread","getState","Container","create","App","news_TopContainer","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e2642ca.chunk.js","sourcesContent":["const ActionTypes = {\n  FETCH_NEWS: \"fetch_news\",\n  RECIEVE_NEWS: \"receive_news\",\n  CHANGE_PAGE: \"change_page\"\n};\n\nexport const ITEMS_PER_PAGE = 5;\n\nexport default ActionTypes;\n","import { Dispatcher } from 'flux';\n\nclass AppDispatcher extends Dispatcher {\n  dispatch(action = {}) {\n    super.dispatch(action);\n  }\n}\n\nexport default new AppDispatcher();\n","import { ReduceStore } from \"flux/utils\";\nimport ActionTypes, { ITEMS_PER_PAGE } from \"../constants/AppConstants\";\nimport AppDispatcher from \"../dispatcher/AppDispatcher\";\n\nclass Store extends ReduceStore {\n  getInitialState() {\n    return {\n      news: [],\n      isLoading: true,\n      activePage: 1,\n      totalItemsCount: 0\n    };\n  }\n\n  reduce(state, action) {\n    let result;\n\n    switch (action.type) {\n      case ActionTypes.FETCH_NEWS:\n        result = { isLoading: true, activePage: action.activePage };\n        return result;\n\n      /**\n       * Fetches all articles state with current page's articles\n       */\n      case ActionTypes.RECEIVE_NEWS:\n        result = {\n          isLoading: false,\n          news: action.response.slice(\n            (action.activePage - 1) * ITEMS_PER_PAGE,\n            action.activePage * ITEMS_PER_PAGE\n          ),\n          allArticles: action.response,\n          activePage: action.activePage,\n          totalItemsCount: action.response.length\n        };\n        return result;\n      /**\n       * Sets state with current page's articles\n       */\n      case ActionTypes.CHANGE_PAGE:\n        result = {\n          isLoading: false,\n          news: state.allArticles.slice(\n            (action.activePage - 1) * ITEMS_PER_PAGE,\n            action.activePage * ITEMS_PER_PAGE\n          ),\n          allArticles: state.allArticles,\n          activePage: action.activePage,\n          totalItemsCount: state.allArticles.length\n        };\n        return result;\n\n      default:\n        return this.state;\n    }\n  }\n}\n\nexport default new Store(AppDispatcher);\n","import axios from \"axios\";\n\nimport AppDispatcher from \"../dispatcher/AppDispatcher\";\nimport ActionTypes from \"../constants/AppConstants\";\n\nconst Actions = {\n  /**\n   * Fetches all articles state if `receiveOnly` is false else dispatches CHANGE_PAGE action,\n   * as the nyt api returns all items regardless of page number query.\n   *\n   * @param {activePage} num - Active page number.\n   * @param {boolean} receiveOnly - True when only page is changed after initial load.\n   */\n  loadNews(activePage, receiveOnly) {\n    if (receiveOnly) {\n      AppDispatcher.dispatch({\n        type: ActionTypes.CHANGE_PAGE,\n        activePage\n      });\n    } else {\n      AppDispatcher.dispatch({ type: ActionTypes.FETCH_NEWS, activePage });\n      const url = `https://api.nytimes.com/svc/topstories/v2/home.json?api-key=b0d412a4584d4627a5b852e0bcbb3b9d&q=singapore`;\n      axios\n        .get(url)\n        .then(response => {\n          AppDispatcher.dispatch({\n            type: ActionTypes.RECEIVE_NEWS,\n            response: response.data.results,\n            activePage\n          });\n        })\n        .catch(error => window.console.log(error));\n    }\n  }\n};\n\nexport default Actions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../App.css\";\n\nclass NewsItem extends React.Component {\n  state = {\n    open: false\n  };\n\n  /**\n   * Toggles details on clicking the article title/image.\n   */\n  handleToggle = () => {\n    if (!this.state.open) {\n      this.setState({ open: true });\n    } else {\n      this.setState({ open: false });\n    }\n  };\n\n  /**\n   * Returns a clickable news item which displays title and thumbnail of an article.\n   */\n  render() {\n    const { article } = this.props;\n    const { open } = this.state;\n    const publishedDate = new Date(article.published_date);\n\n    return (\n      <div className=\"column\">\n        <div className=\"news-container\">\n          <div className=\"news\">\n            <img\n              src={article.multimedia.length ? article.multimedia[0].url : \"\"}\n              onClick={this.handleToggle}\n              className=\"img-responsive\"\n            />\n            <div>\n              <h4\n                className=\"title\"\n                style={{ cursor: \"pointer\" }}\n                onClick={this.handleToggle}\n              >\n                {article.title}\n              </h4>\n              <a\n                className=\"link\"\n                href={article.short_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                NYT Full Article\n              </a>\n            </div>\n          </div>\n          {open ? (\n            <div>\n              <div className=\"excerpt\">{article.abstract}</div>\n              <div className=\"excerpt\">\n                {article.byline ? article.byline : \"The NYT\"}\n              </div>\n              <div className=\"excerpt\">{publishedDate.toLocaleString()}</div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nNewsItem.propTypes = {\n  article: PropTypes.object.isRequired\n};\n\nexport default NewsItem;\n","import React, { Component } from \"react\";\nimport { Container } from \"flux/utils\";\nimport Store from \"../../stores/Store\";\nimport Actions from \"../../actions/Actions\";\nimport Pagination from \"react-js-pagination\";\nimport { ITEMS_PER_PAGE } from \"../../constants/AppConstants\";\n\nimport NewsItem from \"./NewsItem\";\nimport \"../App.css\";\n\nclass TopContainer extends Component {\n  static getStores() {\n    return [Store];\n  }\n\n  static calculateState() {\n    return {\n      ...Store.getState()\n    };\n  }\n\n  componentDidMount() {\n    Actions.loadNews(this.state.activePage);\n  }\n\n  handlePageChange = pageNumber => {\n    Actions.loadNews(pageNumber, Boolean(this.state.totalItemsCount));\n  };\n\n  renderItems() {\n    const { news } = this.state;\n    return news.map(item => <NewsItem key={item.url} article={item} />);\n  }\n\n  /**\n   * Renders paginated news articles.\n   */\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div>\n        <div>\n          {!isLoading ? this.renderItems() : \"Loading\"}\n          <Pagination\n            firstPageText={<i className=\"glyphicon glyphicon-chevron-left\" />}\n            lastPageText={<i className=\"glyphicon glyphicon-chevron-right\" />}\n            prevPageText={<i className=\"glyphicon glyphicon-menu-left\" />}\n            nextPageText={<i className=\"glyphicon glyphicon-menu-right\" />}\n            activePage={this.state.activePage}\n            itemsCountPerPage={ITEMS_PER_PAGE}\n            totalItemsCount={this.state.totalItemsCount}\n            onChange={this.handlePageChange}\n            pageRangeDisplayed={Math.ceil(\n              this.state.totalItemsCount / ITEMS_PER_PAGE\n            )}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Container.create(TopContainer);\n","import React, { Component } from \"react\";\nimport TopContainer from \"./news/TopContainer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2 className=\"App-header\">NYTimes News</h2>\n        <TopContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}